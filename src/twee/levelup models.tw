:: Widgets: Leveling Up[nobr widget]
<<widget "levelcheck">>
<<set _keepGoing = true; $LevelUps = []>>
<<for _keepGoing === true>>
	<<set _keepGoing = false>>
	<<for _puppet range $puppets>>
		<<if _puppet !== null>>
			<<if _puppet.level < setup.LEVEL_CAP && _puppet.xp >= _puppet.XPtoNext()>>
				<<run _puppet.level++; $LevelUps.push(_puppet)>>
				<<set _keepGoing = true>>
				/* This is needed if you want it to be possible for characters to level up multiple times within the same widget call. This ensures the whole check will be done again to check if the puppet's XP matches the requirement for the next level too. */
			<</if>>
		<</if>>
	<</for>>
<</for>>
<</widget>>

<<widget "LevelUp">>
/* To implement this, you will need to enable the level up code detailed in the story JavaScript. */

<<set $B.subject = $args[0]>>
<<run getActor("subject")>>

<<set _num = 1>>

$B.subject.name has reached Level <<print $B.subject.level>>!<br/>

<<set _return = $B.subject.StatTable(subject().level)>>
<<if typeof(_return) == 'string'>>
	/* If only a string is returned, this assumes it is a stat name, and will increment the stat by a default amount (here, 1). */
	<<run $B.subject.stats[_return].base += 1>>
	<<print _return>> +1 = <<print $B.subject.getBase(_return)>>
<<elseif _return instanceof Action>>
	/* If an action is returned, it will be added to the character's actions. */
	<<run subject().actions.push(_action)>>
<<elseif typeof(_return) == 'object'>>
	/* If an object is returned, behaves like growthRates. */
	<<for _pn, _rate range _return>>
		<<if _pn.toLowerCase() == "hp">>
			<<run subject().maxhp += _rate>>
		<<else>>
			<<run $B.subject.stats[_pn].base += _rate>>
		<</if>>
		<<print _pn>> +<<print _rate>> = <b><<print $B.subject.getBase(_pn)>></b><br/>
	<</for>>
<<else>>
	<<print "ERROR in StatTable: undefined result">>
<</if>>
<br/>
<br/>
<center><<button "Continue" "Level Check">><</button>></center>
<</widget>>
