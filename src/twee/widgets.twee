:: Time Widgets [widget nobr]

/* Adds the specified number of minutes. */
<<widget "addmins">>
<<run $now.setMinutes($now.getMinutes() + $args[0])>>
<</widget>>
/* Adds the specified number of hours. */
<<widget "addhrs">>
<<run $now.setHours($now.getHours() + $args[0])>>
<</widget>>

/* Adds the specified number of days. */
<<widget "adddays">>
<<run $now.setHours($now.getHours() + $args[0] * 24)>>
<</widget>>

<<widget "printtime">><<print $now.getHours() + ':'>><<if $now.getMinutes() lt 10>><<print '0'>><</if>><<print $now.getMinutes()>><</widget>>

<<widget "printfulldate">>/* Prints the current date ("{weekday} {month} {day}, {year}"). */
<<print String.format("{0} {1} {2}, {3}",
	GameDays[$now.getDay()],
	GameMonths[$now.getMonth()],
	$now.getDate(),
	$now.getFullYear())
>><</widget>>

<<widget "printFullFriskbday">>/*Prints Frisk's Birthday, including the weekday. */
<<print String.format("{0} {1} {2}, {3}",
	GameDays[$Frisk.bday.getDay()],
	GameMonths[$Frisk.bday.getMonth()],
	$Frisk.bday.getDate(),
	$Frisk.bday.getFullYear())
>><</widget>>
/* Prints Frisk's birthday, without the weekday. */
<<widget "printFriskbday">><<print String.format("{0} {2}, {3}",
GameMonths[$Frisk.bday.getMonth()]
	$Frisk.bday.getDate(),
	$Frisk.bday.getFullYear())>><</widget>>
/* Prints Frisk's birth month. The same for the date and weekday with the other widgets.*/
<<widget "Friskbmonth">><<= GameMonths[$Frisk.bday.getMonth()]>><</widget>>
<<widget "Friskbdate">><<= $Frisk.bday.getDate()>><</widget>>
<<widget "printFriskbweekday">><<= GameDays[$Frisk.bday.getDay()]>><</widget>>

/* Prints the current time (12H). */
<<widget "printtime12hr">>
<<if $now.getHours() eq 0>>
12
<<elseif $now.getHours() gt 12>>
<<print $now.getHours() - 12>>
<<else>>
<<print $now.getHours()>>
<</if>>:
<<if $now.getMinutes() lt 10>>0<</if>><<print $now.getMinutes()>>
<<if $now.getHours() gte 12>>PM<<else>>AM<</if>>
<</widget>>

:: Other Widgets [widget nobr]

<<widget "refresh">><<run Engine.show()>><</widget>>

/* /SetGender>> widget - Start - By HiEv */
<<widget "SetGender">><<nobr>>
/* Usage... (defaults to male) */
/* for "he":   <<SetGender>> or <<SetGender "m">> */
/* for "she":  <<SetGender "f">> */
/* for "they": <<SetGender "n">> */
/* for "it":   <<SetGender "i">> */
/* $pgen: 0 = male, 1 = female, 2 = gender neutral, 3 = no gender */
	<<switch $args[0]>>
		<<case "m">>
			<<set $pgen = 0>>
		<<case "f">>
			<<set $pgen = 1>>
		<<case "n">>
			<<set $pgen = 2>>
		<<case "i">>
			<<set $pgen = 3>>
		<<default>>
			<<set $pgen = 0>>
	<</switch>>
<</nobr>><</widget>>
/* <<SetGender>> widget - End */
/* Extra custom pronouns widget by Jaden */

<<widget "they">><<if $PC.custompronouns is true>><<print $ne>><<else>>?they<</if>><</widget>>
<<widget "them">><<if $PC.custompronouns is true>><<print $nem>><<else>>?them<</if>><</widget>>
<<widget "theyre">><<if $PC.custompronouns is true>><<print $nir + " is">><<else>>?theyre<</if>><</widget>>
<<widget "their">><<if $PC.custompronouns is true>><<print $nir>><<else>>?their<</if>><</widget>>
<<widget "theirs">><<if $PC.custompronouns is true>><<print $nirs>><<else>>?theirs<</if>><</widget>>
<<widget "themself">><<if $PC.custompronouns is true>><<print $nemself>><<else>>?themself<</if>><</widget>>
<<widget "They">><<if $PC.custompronouns is true>><<print $ne.toUpperFirst()>><<else>>?They<</if>><</widget>>
<<widget "Them">><<if $PC.custompronouns is true>><<print $nem.toUpperFirst()>><<else>>?Them<</if>><</widget>>
<<widget "Theyre">><<if $PC.custompronouns is true>><<print $nir.toUpperFirst() + " is">><<else>>?Theyre<</if>><</widget>>
<<widget "Theirs">><<if $PC.custompronouns is true>><<print $nirs.toUpperFirst()>><<else>>?Theirs<</if>><</widget>>
<<widget "Their">><<if $PC.custompronouns is true>><<print $nir.toUpperFirst()>><<else>>?Their<</if>><</widget>>
<<widget "Themself">><<if $PC.custompronouns is true>><<print $nemself.toUpperFirst()>><<else>>?Themself<</if>><</widget>>
<<widget "THEY">><<if $PC.custompronouns is true>><<print $ne.toUpperCase()>><<else>>?THEY<</if>><</widget>>
<<widget "THEM">><<if $PC.custompronouns is true>><<print $nem.toUpperCase()>><<else>>?THEM<</if>><</widget>>
<<widget "THEYRE">><<if $PC.custompronouns is true>><<print $nir.toUpperCase() + " IS">><<else>>?THEYRE<</if>><</widget>>
<<widget "THEIR">><<if $PC.custompronouns is true>><<print $nir.toUpperCase()>><<else>>?THEIR<</if>><</widget>>
<<widget "THEIRS">><<if $PC.custompronouns is true>><<print $nirs.toUpperCase()>><<else>>?THEIRS<</if>><</widget>>
<<widget "THEMSELF">><<if $PC.custompronouns is true>><<print $nemself.toUpperCase()>><<else>>?THEMSELF<</if>><</widget>>

/* <<checkboxPlus>> widget by HiEv
	This widget allows you to display a custom checkbox which sets a
	SugarCube variable, displays a (clickable) label, and satisfies
	accessibility guidelines for users with impairments (usable via the
	keyboard with TAB, SHIFT+TAB, and SPACE keys).  The	checkboxes are
	also larger, to make them easier to see and to click on for mobile
	devices.

	Usage: <<checkboxPlus "variableName" "text" ["className"]>>

	The value of the checkbox would then be tied to a variable, which
	is passed to the widget as a string.  All story variables passed to	the widget will be set to either a Boolean true or false.  If the variable had a "truthy" value, then the checkbox will be checked.
	The	"className" is an optional parameter, which adds that CSS class	to the text.

	Example: /checkboxPlus "$EnabledOp" "Enable Option" "blueText"/
*/
<<widget "checkboxPlus">>
	/* Make sure the variable passed in is a boolean. */
	<<set State.setVar($args[0], !!State.getVar($args[0]))>>
	<<if ndef _checkboxIDno>>
		/* Start checkbox IDs at 1. */
		<<set _checkboxIDno = 1>>
	<<else>>
		/* Next checkbox ID. */
		<<set _checkboxIDno++>>
	<</if>>
	<<set _checkboxData = "'" + $args[0] + "'">>
	<<if def $args[2]>>
		<<set _cbStyle = " " + $args[2]>>
	<<else>>
		<<set _cbStyle = "">>
	<</if>>
	/* Display checkbox. */
	<span class="chkbox" tabindex="0" onkeypress="if ((event.key == ' ') || (event.key == 'Spacebar')) { $(this).find('input[type=\'checkbox\']').trigger('click'); return false; }">
		<<print '<input type="checkbox" id="checkbox_' + _checkboxIDno + '" tabindex="-1" class="cbhidden" onchange="SugarCube.State.setVar(' + _checkboxData + ', this.checked)" data-var="' + $args[0] + '"' + (State.getVar($args[0]) ? ' checked' : '') + '>'>>
		<label @for="'checkbox_' + _checkboxIDno" @class="'chklabel' + _cbStyle">
			$args[1]
		</label>
	</span>
<</widget>> /*
/* checkboxPlus Widget - End */

:: Item Widgets [widget nobr]

<<widget "pickUp">>
  <<set _item = $args[0]>> /* this is a string name, not an Item object */
	<<run console.assert(def $currentArea && def $currentRoom,"ERROR in pickUp: area or room undefined")>>
  <<set _toPickUp = roomItems().find(function (i) { return i && i === _item })>>
  <<if def _toPickUp>>
    <<set _pickedUp = inv().addItem(_toPickUp)>>
    <<if _pickedUp === true>>
      <<set roomItems().deleteAt(roomItems().indexOf(_toPickUp))>>
<<notify 3s 'invupdate'>>You picked up <<an _toPickUp>> <<print _toPickUp>>.<</notify>>
    <<else>>
    	<<notify 3s 'invfull'>>Your inventory is full!<</notify>>
    <</if>>
  <</if>>
<</widget>>

<<widget "dropItem">>
  <<set _item = $args[0]>>  /* this is a string name, not an Item object */
  <<if def $currentArea && def $currentRoom>>
    <<set _toDrop = inv().findItem(_item)>>
      <<if def _toDrop>>
        <<set inv().decItem(_item)>>
        <<set roomItems().push(_item)>>
		<<refresh>>
      <</if>>
  <</if>>
<</widget>>
